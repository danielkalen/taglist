// Generated by CoffeeScript 1.11.1
(function($) {
  var DIMENSIONS, Popup, Tag, TagList, applyStyles, defaultOptions, genTransformOriginStyle, genTransformStyle, getCurrentTranslation, markup, regExCommaList, regExMatrixValues, removeStyles, styles;
  applyStyles = function(el, styleObject, additional) {
    var key, returnedValue, target, value;
    if (additional) {
      styleObject = $.extend({}, styleObject, additional);
    }
    target = el[0] || el;
    for (key in styleObject) {
      value = styleObject[key];
      switch (typeof value) {
        case 'object':
          this.applyStyles(target, value);
          break;
        case 'function':
          returnedValue = value(this);
          if (typeof returnedValue === 'object') {
            this.applyStyles(target, returnedValue);
          } else {
            target.style[key] = returnedValue;
          }
          break;
        default:
          target.style[key] = value;
      }
    }
    return el;
  };
  removeStyles = function(el, styleObject, stylesToReinstate) {
    var stylesToRemove;
    stylesToRemove = new function() {
      var key;
      for (key in styleObject) {
        this[key] = '';
      }
      return this;
    };
    return this.applyStyles(el, stylesToRemove, stylesToReinstate);
  };
  genTransformStyle = function(value, scaleValue) {
    var scale, transformString, translate;
    scale = scaleValue != null ? "scale(scaleValue)" : '';
    translate = "translate(" + value + ")";
    transformString = translate + " " + scale;
    return {
      webkitTransform: transformString,
      mozTransform: transformString,
      msTransform: transformString,
      oTransform: transformString,
      transform: transformString
    };
  };
  genTransformOriginStyle = function(xValue) {
    return {
      webkitTransformOrigin: xValue + " 0%",
      mozTransformOrigin: xValue + " 0%",
      msTransformOrigin: xValue + " 0%",
      oTransformOrigin: xValue + " 0%",
      transformOrigin: xValue + " 0%"
    };
  };
  regExMatrixValues = /matrix3?d?\((.+)\)/;
  regExCommaList = /,\s*/;
  getCurrentTranslation = function(subnotice) {
    var computedStyle, matrix, translateY, values;
    computedStyle = window.getComputedStyle(subnotice.els.subnotice[0]);
    matrix = computedStyle.transform || computedStyle.webkitTransform || computedStyle.mozTransform;
    if ((matrix != null ? matrix.length : void 0) && matrix !== 'none') {
      values = matrix.match(regExMatrixValues)[1];
      translateY = values.split(regExCommaList).slice(-1)[0];
    } else {
      translateY = 0;
    }
    return parseFloat(translateY);
  };
  styles = {};
  styles.container = {
    position: 'relative',
    textAlign: 'left'
  };
  styles.overlay = {
    position: 'fixed',
    top: 0,
    left: 0,
    width: '100vw',
    height: '100vh',
    visibility: 'hidden'
  };
  styles.overlay.isRevealed = {
    visibility: 'visible'
  };
  styles.addButton = {
    position: 'relative',
    display: 'inline-block',
    padding: '0 5px',
    border: '2px dashed',
    fontSize: '23px',
    textAlign: 'center',
    lineHeight: '22px',
    boxSizing: 'border-box',
    cursor: 'pointer',
    userSelect: 'none',
    color: function(tag) {
      return tag.list.options.tagTextColor;
    }
  };
  styles.tag = {};
  styles.tag.container = {
    position: 'relative',
    display: 'inline-block',
    height: '28px',
    marginRight: '10px',
    padding: '0 20px 0 5px',
    fontSize: '13.2px',
    lineHeight: '28px',
    textAlign: 'center',
    boxSizing: 'border-box',
    cursor: 'pointer',
    userSelect: 'none',
    backgroundColor: function(tag) {
      return tag.list.options.tagBGColor;
    },
    color: function(tag) {
      return tag.list.options.tagTextColor;
    }
  };
  styles.tag.removeButton = {
    position: 'absolute',
    right: '5px',
    top: '50%',
    transform: genTransformStyle('0 -50%'),
    fontSize: '17px',
    lineHeight: 1,
    opacity: 0.6
  };
  styles.popup = {};
  styles.popup.container = {
    position: 'fixed',
    backgroundColor: 'white',
    borderRadius: '5px',
    boxShadow: '0px 3px 18px rgba(0,0,0,0.24)',
    opacity: 0,
    boxSizing: 'border-box'
  };
  styles.popup.container.transition = {
    transition: 'transform 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86), -webkit-transform 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86), opacity 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86)'
  };
  styles.popup.content = {
    display: 'none',
    padding: '20px',
    boxSizing: 'border-box'
  };
  styles.popup.content.isRevealed = {
    display: 'block'
  };
  styles.popup.button = {
    position: 'relative',
    display: 'none',
    height: '50px',
    boxSizing: 'border-box',
    cursor: 'pointer',
    userSelect: 'none',
    backgroundColor: function(popup) {
      return popup.list.options.buttonBGColor;
    },
    color: function(popup) {
      return popup.list.options.buttonTextColor;
    }
  };
  styles.popup.button.isRevealed = {
    display: 'block'
  };
  styles.popup.button.text = {
    position: 'absolute',
    top: '53%',
    transform: genTransformStyle('0 -50%'),
    display: 'block',
    width: '100%',
    fontSize: '16px',
    lineHeight: 1,
    fontWeight: 500,
    textAlign: 'center',
    textTransform: 'uppercase',
    letterSpacing: '0.3px'
  };
  styles.popup.selectWrapper = {
    position: 'relative',
    width: '100%',
    height: '55px',
    borderBottom: '1px solid #ddd'
  };
  styles.popup.selectFake = {
    position: 'absolute',
    zIndex: 1,
    left: 0,
    top: '53%',
    transform: genTransformStyle('0 -50%'),
    height: '16px',
    padding: '0 15px',
    fontSize: '16px',
    lineHeight: 1,
    textAlign: 'left',
    opacity: 0.6,
    userSelect: 'none',
    boxSizing: 'border-box'
  };
  styles.popup.selectFake.hasColor = {
    opacity: 1
  };
  styles.popup.selectInput = {
    position: 'absolute',
    zIndex: 2,
    width: '100%',
    height: '100%',
    opacity: 0
  };
  markup = {
    container: function() {
      return "<div class='TagList'></div>";
    },
    overlay: function() {
      return "<div class='TagList-overlay'></div>";
    },
    addButton: function() {
      return "<div class='TagList-addButton'> <div class='TagList-addButton-icon'>&#43;</div> </div>";
    },
    tag: {
      container: function() {
        return "<div class='TagList-Tag'></div>";
      },
      removeButton: function() {
        return "<div class='TagList-Tag-removeButton'>Ã—</div>";
      },
      text: function() {
        return "<div class='TagList-Tag-text'> <b>{{label}}</b>: {{value}} </div>";
      }
    },
    popup: {
      container: function() {
        return "<div class='TagList-Popup'></div>";
      },
      selectWrapper: function() {
        return "<div class='TagList-Popup-selectField'></div>";
      },
      selectFake: function() {
        return "<div class='TagList-Popup-selectField-fake'></div>";
      },
      selectInput: function(itemLabel) {
        return "<select class='TagList-Popup-selectField-input'> <option value=''>Select " + itemLabel + "...</option> {{options}} </select>";
      },
      content: function() {
        return "<div class='TagList-Popup-content'></div>";
      },
      button: function(itemLabel) {
        return "<div class='TagList-Popup-button'> <div class='TagList-Tag-button-text'>Add " + itemLabel + "</div> </div>";
      }
    }
  };
  defaultOptions = {
    'default': {},
    'itemLabel': 'Option',
    'tagBGColor': '#ccc',
    'tagTextColor': '#000',
    'buttonBGColor': '#f74425',
    'buttonTextColor': '#fff'
  };
  Popup = function(list, parent, hasSelect) {
    this.list = list;
    this.parent = parent;
    this.hasSelect = hasSelect;
    this.applyStyles = applyStyles.bind(this);
    this.removeStyles = removeStyles.bind(this);
    this.isOpen = false;
    this.currentOffset = {
      x: 0,
      y: 0,
      scale: 0
    };
    this.els = {};
    this.els.container = $(markup.popup.container());
    this.els.content = $(markup.popup.content()).appendTo(this.els.container);
    if (this.hasSelect) {
      this.els.selectWrapper = $(markup.popup.selectWrapper()).insertBefore(this.els.content);
      this.els.selectFake = $(markup.popup.selectFake()).appendTo(this.els.selectWrapper);
      this.els.selectInput = $(markup.popup.selectInput(this.list.options.itemLabel)).appendTo(this.els.selectWrapper);
      this.els.button = $(markup.popup.button(this.list.options.itemLabel)).appendTo(this.els.container);
    }
    this.attachBindings();
    this.appendToDOM();
    return this;
  };
  Popup.prototype.appendToDOM = function() {
    this.applyStyles(this.els.container, TagList.style.popup.container);
    this.applyStyles(this.els.content, TagList.style.popup.content);
    if (this.hasSelect) {
      this.applyStyles(this.els.selectWrapper, TagList.style.popup.selectWrapper);
      this.applyStyles(this.els.selectFake, TagList.style.popup.selectFake);
      this.applyStyles(this.els.selectInput, TagList.style.popup.selectInput);
      this.applyStyles(this.els.button, TagList.style.popup.button);
      this.applyStyles(this.els.button.children(), TagList.style.popup.buttonText);
    }
    return this.els.container.appendTo(this.parent);
  };
  Popup.prototype.attachBindings = function() {
    SimplyBind('windowScrollY').of(Popup).to((function(_this) {
      return function(newScroll, prevScroll) {
        return _this.resetYPosition(newScroll, prevScroll);
      };
    })(this)).condition((function(_this) {
      return function(newScroll, prevScroll) {
        return _this.isOpen && (prevScroll != null);
      };
    })(this));
    SimplyBind('windowScrollX').of(Popup).to((function(_this) {
      return function(newScroll, prevScroll) {
        return _this.resetXPosition(newScroll, prevScroll);
      };
    })(this)).condition((function(_this) {
      return function(newScroll, prevScroll) {
        return _this.isOpen && (prevScroll != null);
      };
    })(this));
    SimplyBind('windowWidth').of(Popup).to((function(_this) {
      return function(newWidth, prevWidth) {
        return _this.resetWidth(newWidth, prevWidth);
      };
    })(this)).condition((function(_this) {
      return function() {
        return _this.isOpen;
      };
    })(this));
    SimplyBind('currentOffset', {
      updateOnBind: false
    }).of(this).to((function(_this) {
      return function(offset) {
        return _this.applyStyles(_this.els.container, genTransformStyle(offset.x + "px " + offset.y + "px", offset.scale));
      };
    })(this));
    SimplyBind(0).ofEvent('click').of(this.list.els.overlay).to((function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    if (this.hasSelect) {
      SimplyBind('tagOptions').of(this.list).to('innerHTML.options').of(this.els.selectInput).transform(function(options) {
        var i, len, option, output;
        output = '';
        for (i = 0, len = options.length; i < len; i++) {
          option = options[i];
          output += "<option value='" + option.name + "'>" + option.label + "</option>";
        }
        return output;
      });
      return SimplyBind('value').of(this.els.selectInput).to('innerHTML').of(this.els.selectFake).and.to((function(_this) {
        return function(selectedOption) {
          var styleMethod;
          styleMethod = selectedOption ? 'applyStyles' : 'removeStyles';
          _this[styleMethod](_this.els.selectFake, TagList.style.popup.selectFake.hasColor);
          _this[styleMethod](_this.els.content, TagList.style.popup.content.isRevealed);
          return _this[styleMethod](_this.els.button, TagList.style.popup.button.isRevealed);
        };
      })(this));
    }
  };
  DIMENSIONS = {
    'maxWidth': 350,
    'padding': 20,
    'offset': 25
  };
  Popup.prototype.open = function() {
    var animation;
    return animation = new Promise((function(_this) {
      return function(resolve) {
        var centerDiff, parentDimensions, targetDimensions;
        if (_this.isOpen) {
          return resolve();
        }
        _this.list.closeAllPopups();
        _this.isOpen = true;
        parentDimensions = _this.parent[0].getBoundingClientRect();
        parentDimensions.x = parentDimensions.left;
        parentDimensions.y = parentDimensions.top;
        parentDimensions.centerLeft = parentDimensions.x + parentDimensions.width / 2;
        targetDimensions = {};
        targetDimensions.y = parentDimensions.y + parentDimensions.height + DIMENSIONS.offset;
        if (Popup.windowWidth > DIMENSIONS.maxWidth + DIMENSIONS.padding * 2) {
          targetDimensions.width = DIMENSIONS.maxWidth;
        } else {
          targetDimensions.width = Popup.windowWidth - DIMENSIONS.padding * 2;
          targetDimensions.x = DIMENSIONS.padding;
        }
        if (!targetDimensions.x) {
          targetDimensions.x = (parentDimensions.centerLeft - targetDimensions.width / 2) + DIMENSIONS.padding;
          if (targetDimensions.x < DIMENSIONS.padding) {
            targetDimensions.x = DIMENSIONS.padding;
          } else if (targetDimensions.x + targetDimensions.width + DIMENSIONS.padding > Popup.windowWidth - DIMENSIONS.padding) {
            targetDimensions.x = Popup.windowWidth - DIMENSIONS.padding - targetDimensions.width;
          }
        }
        centerDiff = parentDimensions.centerLeft - (targetDimensions.x + targetDimensions.width / 2);
        targetDimensions.scaleOrigin = targetDimensions.width / 2 + centerDiff;
        _this.els.container.insertAfter(_this.list.els.overlay);
        _this.applyStyles(_this.list.els.overlay, TagList.style.overlay.isRevealed);
        _this.applyStyles(_this.els.container, TagList.style.popup.container.transition, {
          top: targetDimensions.y + "px",
          left: targetDimensions.x + "px",
          width: targetDimensions.width + "px",
          opacity: 1,
          transformOrigin: genTransformOriginStyle(targetDimensions.scaleOrigin + "px")
        });
        _this.currentOffset = {
          x: 0,
          y: 0,
          scale: 1
        };
        setTimeout(resolve, 325);
        return animation.then(function() {
          return _this.removeStyles(_this.els.container, TagList.style.popup.container.transition);
        });
      };
    })(this));
  };
  Popup.prototype.close = function() {
    var animation;
    return animation = new Promise((function(_this) {
      return function(resolve) {
        if (!_this.isOpen) {
          return resolve();
        }
        _this.isOpen = false;
        _this.applyStyles(_this.list.els.overlay, TagList.style.overlay);
        _this.applyStyles(_this.els.container, TagList.style.popup.container.transition, {
          opacity: 0
        });
        _this.currentOffset = $.extend({}, _this.currentOffset, {
          scale: 0
        });
        setTimeout(resolve, 325);
        return animation.then(function() {
          return _this.removeStyles(_this.els.container, TagList.style.popup.container.transition);
        });
      };
    })(this));
  };
  Popup.prototype.resetYPosition = function(newScrollY, prevScrollY) {
    var yChange;
    yChange = newScrollY + prevScrollY;
    return this.currentOffset = $.extend({}, this.currentOffset, {
      y: this.currentOffset + yChange
    });
  };
  Popup.prototype.resetXPosition = function(newScrollX, prevScrollX) {
    var xChange;
    xChange = newScrollX + prevScrollX;
    return this.currentOffset = $.extend({}, this.currentOffset, {
      x: this.currentOffset + xChange
    });
  };
  Popup.prototype.resetWidth = function(newWidth) {
    if (Popup.windowWidth > DIMENSIONS.maxWidth + DIMENSIONS.padding * 2) {
      return targetDimensions.width = DIMENSIONS.maxWidth;
    } else {
      return targetDimensions.width = Popup.windowWidth - DIMENSIONS.padding * 2;
    }
  };
  SimplyBind(0).ofEvent('scroll').of(window).to(function() {
    Popup.windowScrollY = window.scrollY;
    return Popup.windowScrollX = window.scrollX;
  });
  SimplyBind(0).ofEvent('resize').of(window).to(function() {
    Popup.windowHeight = window.innerHeight;
    return Popup.windowWidth = window.innerWidth;
  });
  Popup.windowScroll = window.scrollY;
  Popup.windowHeight = window.innerHeight;
  Popup.windowWidth = window.innerWidth;
  Tag = function(list, options1, data, popupContent) {
    this.list = list;
    this.options = options1;
    this.data = data != null ? data : {};
    this.applyStyles = applyStyles.bind(this);
    this.removeStyles = removeStyles.bind(this);
    this.name = this.options.name;
    this.label = this.options.label;
    this.value = this.options["default"] || '';
    this.els = {};
    this.els.container = $(markup.tag.container()).data('Tag', this);
    this.els.text = $(markup.tag.text()).appendTo(this.els.container);
    this.els.removeButton = $(markup.tag.removeButton()).appendTo(this.els.container);
    this.popup = new Popup(this.list, this.els.container);
    if (popupContent) {
      $(popupContent).appendTo(this.popup.els.content);
    } else {
      $(this.options.content(this.data)).appendTo(this.popup.els.content);
    }
    this.attachBindings();
    this.appendToDOM();
    return this;
  };
  Tag.prototype.appendToDOM = function() {
    this.applyStyles(this.els.container, TagList.style.tag.container);
    this.applyStyles(this.els.removeButton, TagList.style.tag.removeButton);
    return this.els.container.insertBefore(this.list.els.addButton);
  };
  Tag.prototype.attachBindings = function() {
    SimplyBind('label').of(this).to('textContent.label').of(this.els.text).transform((function(_this) {
      return function(label) {
        if (_this.options.labelFormatter) {
          return _this.options.labelFormatter(label);
        } else {
          return label;
        }
      };
    })(this));
    SimplyBind('value').of(this).to('textContent.value').of(this.els.text).transform((function(_this) {
      return function(value) {
        if (_this.options.valueFormatter) {
          return _this.options.valueFormatter(value);
        } else {
          return value;
        }
      };
    })(this));
    SimplyBind(0).ofEvent('click').of(this.els.removeButton).to((function(_this) {
      return function(event) {
        _this.remove();
        return event.stopPropagation();
      };
    })(this));
    SimplyBind(0).ofEvent('click').of(this.els.container).to((function(_this) {
      return function(event) {
        return _this.popup.open();
      };
    })(this));
    return SimplyBind('value', {
      updateOnBind: !!this.data.value
    }).of(this.data).to('value').of(this);
  };
  Tag.prototype.remove = function() {
    this.popup.close();
    this.els.container.remove();
    return this.list.tags.splice(this.list.tags.indexOf(this), 1);
  };
  TagList = function(targetContainer, tagOptions, options) {
    var defaultTagName, defaultTagValue, i, len, ref, ref1, tagOption;
    this.targetContainer = targetContainer;
    this.tagOptions = tagOptions != null ? tagOptions : [];
    this.applyStyles = applyStyles.bind(this);
    this.removeStyles = removeStyles.bind(this);
    this.options = $.extend(true, {}, defaultOptions, options);
    this.tags = [];
    this.current = {};
    this.els = {};
    this.els.container = $(markup.container()).data('TagList', this);
    this.els.overlay = $(markup.overlay()).prependTo(document.body);
    this.els.addButton = $(markup.addButton(this.options.itemLabel)).appendTo(this.els.container);
    this.popup = new Popup(this, this.els.addButton);
    ref = this.tagOptions;
    for (i = 0, len = ref.length; i < len; i++) {
      tagOption = ref[i];
      if (tagOption.name == null) {
        tagOption.name = tagOption.label;
      }
    }
    ref1 = this.options["default"];
    for (defaultTagName in ref1) {
      defaultTagValue = ref1[defaultTagName];
      tagOption = this.tagOptions.find(function(tagOption) {
        return tagOption.name === defaultTagName;
      });
      this.add({
        value: defaultTagValue
      }, tagOption);
    }
    this.attachBindings();
    this.appendToDOM();
    return this;
  };
  TagList.prototype.addTagOption = function(tagOption) {
    return this.tagOptions.push(tagOption);
  };
  TagList.prototype.add = function(tagData, tagOption, popupContent) {
    var tagObj;
    this.tags.push(tagObj = new Tag(this, tagOption, tagData, popupContent));
    return SimplyBind('value', {
      updateOnBind: false
    }).of(tagObj).to((function(_this) {
      return function() {
        return _this.triggerChange();
      };
    })(this));
  };
  TagList.prototype.appendToDOM = function() {
    this.applyStyles(this.els.container, TagList.style.container);
    this.applyStyles(this.els.overlay, TagList.style.overlay);
    this.applyStyles(this.els.addButton, TagList.style.addButton);
    return this.els.container.appendTo(this.targetContainer);
  };
  TagList.prototype.attachBindings = function() {
    SimplyBind(0).ofEvent('click').of(this.els.addButton).to((function(_this) {
      return function() {
        return _this.openPopup();
      };
    })(this));
    SimplyBind(0).ofEvent('click').of(this.popup.els.button).to((function(_this) {
      return function() {
        _this.add(_this.current.dataObj, _this.current.tagOption, _this.current.contentElement);
        return _this.popup.close().then(function() {
          return _this.selectedTag = '';
        });
      };
    })(this));
    return SimplyBind('value').of(this.popup.els.selectInput).to('selectedTag').of(this).bothWays().chainTo((function(_this) {
      return function(selectedTag) {
        if (selectedTag) {
          _this.current.dataObj = {
            value: null
          };
          _this.current.tagOption = _this.tagOptions.find(function(tagOption) {
            return tagOption.name === selectedTag;
          });
          return _this.current.contentElement = $(tagOption.content(_this.current.dataObj)).appendTo();
        }
      };
    })(this));
  };
  TagList.prototype.closeAllPopups = function() {
    var i, len, ref, results, tag;
    this.popup.close();
    ref = this.tags;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      tag = ref[i];
      results.push(tag.popup.close());
    }
    return results;
  };
  TagList.prototype.triggerChange = function() {
    var base, tags, values;
    tags = this.tags;
    values = new function() {
      var i, len, results, tag;
      results = [];
      for (i = 0, len = tags.length; i < len; i++) {
        tag = tags[i];
        results.push(this[tag.name] = tag.value);
      }
      return results;
    };
    return typeof (base = this.options).onChange === "function" ? base.onChange(values, this) : void 0;
  };
  TagList.prototype.getTagOptionByName = function(targetName) {
    return this.tagOptions.find(function(tagOption) {
      return tagOption.name === targetName;
    });
  };
  TagList.style = styles;
  TagList.tagBGColor = '#bebebe';
  TagList.tagTextColor = '#000';
  TagList.version = '1.0.0';
  return window.TagList = TagList;
})(jQuery);
