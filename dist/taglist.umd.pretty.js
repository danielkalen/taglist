// Generated by CoffeeScript 1.11.1
(function($) {
  var Popup, Tag, TagList, applyStyles, defaultDimensions, defaultOptions, defaultPopupOptions, genTransformOriginStyle, genTransformStyle, getCurrentTranslation, getDefaultDimensions, getElDimensions, markup, regExCommaList, regExMatrixValues, removeStyles, styles;
  applyStyles = function(el, styleObject, additional) {
    var key, returnedValue, target, value;
    if (additional) {
      styleObject = $.extend({}, styleObject, additional);
    }
    target = el[0] || el;
    for (key in styleObject) {
      value = styleObject[key];
      switch (typeof value) {
        case 'object':
          break;
        case 'function':
          returnedValue = value(this);
          if (typeof returnedValue === 'object') {
            this.applyStyles(target, returnedValue);
          } else {
            target.style[key] = returnedValue;
          }
          break;
        default:
          target.style[key] = value;
      }
    }
    return el;
  };
  removeStyles = function(el, styleObject, stylesToReinstate) {
    var stylesToRemove;
    stylesToRemove = new function() {
      var key;
      for (key in styleObject) {
        this[key] = '';
      }
      return this;
    };
    return this.applyStyles(el, stylesToRemove, stylesToReinstate);
  };
  defaultDimensions = {
    'maxWidth': 350,
    'leftPadding': 20,
    'rightPadding': 20,
    'offset': 25
  };
  getDefaultDimensions = function(boundingElDimensions) {
    var DIMENSIONS;
    DIMENSIONS = $.extend({}, defaultDimensions);
    DIMENSIONS.leftPadding += boundingElDimensions.x;
    DIMENSIONS.rightPadding += Popup.windowWidth - (boundingElDimensions.x + boundingElDimensions.width);
    return DIMENSIONS;
  };
  getElDimensions = function(el, leftPadding) {
    var dimensions;
    if (leftPadding == null) {
      leftPadding = 0;
    }
    dimensions = el.getBoundingClientRect();
    dimensions.x = dimensions.left - leftPadding;
    dimensions.y = dimensions.top;
    dimensions.centerLeft = dimensions.left + dimensions.width / 2;
    return dimensions;
  };
  genTransformStyle = function(value, scaleValue) {
    var scale, transformString, translate;
    scale = scaleValue != null ? "scale(" + scaleValue + ")" : '';
    translate = "translate(" + value + ")";
    transformString = translate + " " + scale;
    return {
      webkitTransform: transformString,
      mozTransform: transformString,
      msTransform: transformString,
      oTransform: transformString,
      transform: transformString
    };
  };
  genTransformOriginStyle = function(xValue) {
    return {
      webkitTransformOrigin: xValue + " 0%",
      mozTransformOrigin: xValue + " 0%",
      msTransformOrigin: xValue + " 0%",
      oTransformOrigin: xValue + " 0%",
      transformOrigin: xValue + " 0%"
    };
  };
  regExMatrixValues = /matrix3?d?\((.+)\)/;
  regExCommaList = /,\s*/;
  getCurrentTranslation = function(subnotice) {
    var computedStyle, matrix, translateY, values;
    computedStyle = window.getComputedStyle(subnotice.els.subnotice[0]);
    matrix = computedStyle.transform || computedStyle.webkitTransform || computedStyle.mozTransform;
    if ((matrix != null ? matrix.length : void 0) && matrix !== 'none') {
      values = matrix.match(regExMatrixValues)[1];
      translateY = values.split(regExCommaList).slice(-1)[0];
    } else {
      translateY = 0;
    }
    return parseFloat(translateY);
  };
  styles = {};
  styles.container = {
    position: 'relative',
    textAlign: 'left'
  };
  styles.overlay = {
    position: 'fixed',
    zIndex: 2000,
    top: 0,
    left: 0,
    width: '100vw',
    height: '100vh',
    visibility: 'hidden'
  };
  styles.overlay.isRevealed = {
    visibility: 'visible'
  };
  styles.addButton = {
    position: 'relative',
    display: 'inline-block',
    verticalAlign: 'top',
    height: '28px',
    width: '28px',
    border: '2px dashed',
    borderRadius: '5px',
    boxSizing: 'border-box',
    cursor: 'pointer',
    userSelect: 'none',
    opacity: 0.35,
    color: function(tagList) {
      return tagList.options.tagTextColor;
    }
  };
  styles.addButton.text = {
    position: 'absolute',
    left: 0,
    right: 0,
    top: '55%',
    transform: function() {
      return genTransformStyle('0, -50%');
    },
    width: '100%',
    lineHeight: 1,
    textAlign: 'center',
    fontSize: '23px',
    fontWeight: 600
  };
  styles.tag = {};
  styles.tag.container = {
    position: 'relative',
    display: 'inline-block',
    verticalAlign: 'top',
    height: '28px',
    marginRight: '10px',
    marginBottom: '6px',
    padding: '0 25px 0 10px',
    borderRadius: '4px',
    textAlign: 'center',
    boxSizing: 'border-box',
    cursor: 'pointer',
    userSelect: 'none',
    backgroundColor: function(tag) {
      return tag.list.options.tagBGColor;
    },
    color: function(tag) {
      return tag.list.options.tagTextColor;
    }
  };
  styles.tag.text = {
    position: 'relative',
    top: '9px',
    fontSize: '13.2px',
    lineHeight: 1
  };
  styles.tag.removeButton = {
    position: 'absolute',
    right: '8px',
    top: '55%',
    transform: function() {
      return genTransformStyle('0, -50%');
    },
    fontSize: '17px',
    lineHeight: 1,
    opacity: 0.4,
    fontWeight: 600
  };
  styles.popup = {};
  styles.popup.container = {
    position: 'fixed',
    zIndex: 2001,
    backgroundColor: 'white',
    borderRadius: '5px',
    boxShadow: '0px 3px 18px rgba(0,0,0,0.24)',
    opacity: 0,
    boxSizing: 'border-box'
  };
  styles.popup.container.transition = {
    transition: 'transform 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86), -webkit-transform 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86), opacity 0.3s cubic-bezier(0.785, 0.135, 0.15, 0.86)'
  };
  styles.popup.content = {
    display: 'none',
    padding: function(popup) {
      return popup.options.padding + "px";
    },
    boxSizing: 'border-box'
  };
  styles.popup.content.isRevealed = {
    display: 'block'
  };
  styles.popup.button = {
    position: 'relative',
    display: 'none',
    height: '50px',
    borderRadius: '0 0 5px 5px',
    boxSizing: 'border-box',
    cursor: 'pointer',
    userSelect: 'none',
    backgroundColor: function(popup) {
      return popup.list.options.buttonBGColor;
    },
    color: function(popup) {
      return popup.list.options.buttonTextColor;
    }
  };
  styles.popup.button.isRevealed = {
    display: 'block'
  };
  styles.popup.button.text = {
    position: 'absolute',
    top: '53%',
    transform: function() {
      return genTransformStyle('0, -50%');
    },
    display: 'block',
    width: '100%',
    fontSize: '16px',
    lineHeight: 1,
    fontWeight: 500,
    textAlign: 'center',
    textTransform: 'uppercase',
    letterSpacing: '1.5px'
  };
  styles.popup.selectWrapper = {
    position: 'relative',
    width: '100%',
    height: '55px',
    borderBottom: '1px solid #ddd'
  };
  styles.popup.selectArrow = {
    position: 'absolute',
    zIndex: 2,
    right: '15px',
    top: '54%',
    transform: function() {
      return genTransformStyle('0, -50%');
    },
    width: '17px',
    height: '17px',
    backgroundSize: '100%',
    backgroundImage: "url(data:image/svg+xml;utf8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pgo8IS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTguMS4xLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAgLS0+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgdmVyc2lvbj0iMS4xIiBpZD0iQ2FwYV8xIiB4PSIwcHgiIHk9IjBweCIgdmlld0JveD0iMCAwIDMwOS4xNTYgMzA5LjE1NiIgc3R5bGU9ImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMzA5LjE1NiAzMDkuMTU2OyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgd2lkdGg9IjY0cHgiIGhlaWdodD0iNjRweCI+CjxnPgoJPGc+CgkJPHBvbHlnb24gcG9pbnRzPSIyODguNDYxLDY0LjkyOSAxNTQuNTg5LDIwMi43NjYgMjAuNzIzLDY0Ljk0IDAsODUuMDcgMTU0LjU4OSwyNDQuMjI4IDMwOS4xNTYsODUuMDcgICAiIGZpbGw9IiMwMDAwMDAiLz4KCTwvZz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8Zz4KPC9nPgo8L3N2Zz4K)",
    opacity: 0.5
  };
  styles.popup.selectFake = {
    position: 'absolute',
    zIndex: 1,
    left: 0,
    top: '53%',
    transform: function() {
      return genTransformStyle('0, -50%');
    },
    height: '16px',
    padding: '0 15px',
    fontSize: '16px',
    fontWeight: 500,
    lineHeight: 1,
    textAlign: 'left',
    userSelect: 'none',
    boxSizing: 'border-box',
    color: '#181818',
    opacity: 0.6
  };
  styles.popup.selectFake.hasColor = {
    opacity: 1
  };
  styles.popup.selectInput = {
    position: 'absolute',
    zIndex: 3,
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    opacity: 0
  };
  markup = {
    container: function() {
      return "<div class='TagList'></div>";
    },
    overlay: function() {
      return "<div class='TagList-overlay'></div>";
    },
    addButton: function() {
      return "<div class='TagList-addButton'> <div class='TagList-addButton-icon'>&#43;</div> </div>";
    },
    tag: {
      container: function() {
        return "<div class='TagList-Tag'></div>";
      },
      removeButton: function() {
        return "<div class='TagList-Tag-removeButton'>Ã—</div>";
      },
      text: function() {
        return "<div class='TagList-Tag-text'> <b>{{label}}</b>: {{value}} </div>";
      }
    },
    popup: {
      container: function() {
        return "<div class='TagList-Popup'></div>";
      },
      selectWrapper: function() {
        return "<div class='TagList-Popup-selectField'></div>";
      },
      selectArrow: function() {
        return "<div class='TagList-Popup-selectField-arrow'></div>";
      },
      selectFake: function() {
        return "<div class='TagList-Popup-selectField-fake'></div>";
      },
      selectInput: function(itemLabel) {
        return "<select class='TagList-Popup-selectField-input'> <option value=''>Select " + itemLabel + "...</option> {{options}} </select>";
      },
      content: function() {
        return "<div class='TagList-Popup-content'></div>";
      },
      button: function(itemLabel) {
        return "<div class='TagList-Popup-button'> <div class='TagList-Tag-button-text'>Add " + itemLabel + "</div> </div>";
      }
    }
  };
  defaultOptions = {
    'default': {},
    'boundingEl': document.body,
    'itemLabel': 'Option',
    'tagBGColor': '#ccc',
    'tagTextColor': '#181818',
    'buttonBGColor': '#f74425',
    'buttonTextColor': '#fff'
  };
  defaultPopupOptions = {
    'maxWidth': 350,
    'padding': 20
  };
  Popup = function(list, parent, options, hasSelect) {
    this.list = list;
    this.parent = parent;
    if (options == null) {
      options = {};
    }
    this.hasSelect = hasSelect;
    this.applyStyles = applyStyles.bind(this);
    this.removeStyles = removeStyles.bind(this);
    this.options = $.extend({}, defaultPopupOptions, options);
    this.isOpen = false;
    this.currentOffset = {
      x: 0,
      y: 0,
      scale: 0
    };
    this.els = {};
    this.els.container = $(markup.popup.container()).data('Popup', this);
    this.els.content = $(markup.popup.content()).appendTo(this.els.container);
    if (this.hasSelect) {
      this.els.selectWrapper = $(markup.popup.selectWrapper()).insertBefore(this.els.content);
      this.els.selectArrow = $(markup.popup.selectArrow()).appendTo(this.els.selectWrapper);
      this.els.selectFake = $(markup.popup.selectFake()).appendTo(this.els.selectWrapper);
      this.els.selectInput = $(markup.popup.selectInput(this.list.options.itemLabel)).appendTo(this.els.selectWrapper);
      this.els.button = $(markup.popup.button(this.list.options.itemLabel)).appendTo(this.els.container);
    }
    this.attachBindings();
    this.appendToDOM();
    return this;
  };
  Popup.prototype.appendToDOM = function() {
    this.applyStyles(this.els.container, TagList.style.popup.container);
    this.applyStyles(this.els.content, TagList.style.popup.content);
    if (this.hasSelect) {
      this.applyStyles(this.els.selectWrapper, TagList.style.popup.selectWrapper);
      this.applyStyles(this.els.selectArrow, TagList.style.popup.selectArrow);
      this.applyStyles(this.els.selectFake, TagList.style.popup.selectFake);
      this.applyStyles(this.els.selectInput, TagList.style.popup.selectInput);
      this.applyStyles(this.els.button, TagList.style.popup.button);
      this.applyStyles(this.els.button.children(), TagList.style.popup.button.text);
    }
    return this.els.container.appendTo(this.parent);
  };
  Popup.prototype.attachBindings = function() {
    SimplyBind('windowScrollY', {
      updateOnBind: false
    }).of(Popup).to((function(_this) {
      return function(newScroll, prevScroll) {
        return _this.resetYPosition(newScroll, prevScroll);
      };
    })(this)).condition((function(_this) {
      return function(newScroll, prevScroll) {
        return _this.isOpen;
      };
    })(this));
    SimplyBind('windowScrollX', {
      updateOnBind: false
    }).of(Popup).to((function(_this) {
      return function(newScroll, prevScroll) {
        return _this.resetXPosition(newScroll, prevScroll);
      };
    })(this)).condition((function(_this) {
      return function(newScroll, prevScroll) {
        return _this.isOpen;
      };
    })(this));
    SimplyBind('windowWidth', {
      updateOnBind: false
    }).of(Popup).to((function(_this) {
      return function(newWidth, prevWidth) {
        return _this.resetWidth(newWidth, prevWidth);
      };
    })(this)).condition((function(_this) {
      return function() {
        return _this.isOpen;
      };
    })(this));
    SimplyBind('currentOffset').of(this).to((function(_this) {
      return function(offset) {
        return _this.applyStyles(_this.els.container, genTransformStyle(offset.x + "px, " + offset.y + "px", offset.scale));
      };
    })(this));
    SimplyBind(0).ofEvent('click').of(this.list.els.overlay).to((function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    if (!this.hasSelect) {
      return SimplyBind('isOpen').of(this).to((function(_this) {
        return function(isOpen) {
          if (isOpen) {
            return _this.applyStyles(_this.els.content, TagList.style.popup.content.isRevealed);
          }
        };
      })(this));
    } else {
      SimplyBind(this.list.tagOptionsAvailable, {
        trackArrayChildren: false
      }).to('innerHTML.options').of(this.els.selectInput).transform(function(options) {
        var i, len, option, output;
        output = '';
        for (i = 0, len = options.length; i < len; i++) {
          option = options[i];
          output += "<option>" + option.label + "</option>";
        }
        return output;
      });
      return SimplyBind('value').of(this.els.selectInput).to('innerHTML').of(this.els.selectFake).transform((function(_this) {
        return function(value) {
          if (value) {
            return value;
          } else {
            return _this.els.selectInput[0].options[0].innerHTML;
          }
        };
      })(this)).and.to((function(_this) {
        return function(selectedOption) {
          if (selectedOption) {
            _this.applyStyles(_this.els.selectFake, TagList.style.popup.selectFake.hasColor);
            _this.applyStyles(_this.els.content, TagList.style.popup.content.isRevealed);
            return _this.applyStyles(_this.els.button, TagList.style.popup.button.isRevealed);
          } else {
            _this.applyStyles(_this.els.selectFake, TagList.style.popup.selectFake);
            _this.applyStyles(_this.els.content, TagList.style.popup.content);
            return _this.applyStyles(_this.els.button, TagList.style.popup.button);
          }
        };
      })(this));
    }
  };
  Popup.prototype.open = function() {
    return new Promise((function(_this) {
      return function(resolve) {
        var DIMENSIONS, boundingElDimensions, centerDiff, parentDimensions, targetDimensions, windowWidth;
        if (_this.isOpen) {
          return resolve();
        }
        _this.list.closeAllPopups();
        _this.isOpen = true;
        boundingElDimensions = getElDimensions(_this.list.options.boundingEl[0]);
        DIMENSIONS = getDefaultDimensions(boundingElDimensions);
        windowWidth = Popup.windowWidth - DIMENSIONS.leftPadding - DIMENSIONS.rightPadding;
        parentDimensions = getElDimensions(_this.parent[0], DIMENSIONS.leftPadding);
        targetDimensions = {
          'y': parentDimensions.y + parentDimensions.height + DIMENSIONS.offset
        };
        if (windowWidth > _this.options.maxWidth + (DIMENSIONS.leftPadding + DIMENSIONS.rightPadding)) {
          targetDimensions.width = _this.options.maxWidth;
        } else {
          targetDimensions.width = windowWidth - (DIMENSIONS.leftPadding + DIMENSIONS.rightPadding);
          targetDimensions.x = DIMENSIONS.leftPadding;
        }
        if (!targetDimensions.x) {
          targetDimensions.x = parentDimensions.centerLeft - targetDimensions.width / 2;
          if (targetDimensions.x < DIMENSIONS.leftPadding) {
            targetDimensions.x = DIMENSIONS.leftPadding;
          } else if (targetDimensions.x + targetDimensions.width + DIMENSIONS.rightPadding > windowWidth) {
            targetDimensions.x = windowWidth - targetDimensions.width;
          }
        }
        centerDiff = parentDimensions.centerLeft - (targetDimensions.x + targetDimensions.width / 2);
        targetDimensions.scaleOrigin = targetDimensions.width / 2 + centerDiff;
        _this.els.container.insertAfter(_this.list.els.overlay);
        return setTimeout(function() {
          _this.applyStyles(_this.list.els.overlay, TagList.style.overlay.isRevealed);
          _this.applyStyles(_this.els.container, TagList.style.popup.container.transition);
          _this.applyStyles(_this.els.container, {
            top: targetDimensions.y + "px",
            left: targetDimensions.x + "px",
            width: targetDimensions.width + "px",
            opacity: 1,
            transformOrigin: function() {
              return genTransformOriginStyle(targetDimensions.scaleOrigin + "px");
            }
          });
          _this.currentOffset = {
            x: 0,
            y: 0,
            scale: 1
          };
          return setTimeout(function() {
            _this.removeStyles(_this.els.container, TagList.style.popup.container.transition);
            return resolve();
          }, 325);
        }, 50);
      };
    })(this));
  };
  Popup.prototype.close = function() {
    var animation;
    return animation = new Promise((function(_this) {
      return function(resolve) {
        if (!_this.isOpen) {
          return resolve();
        }
        _this.isOpen = false;
        _this.applyStyles(_this.list.els.overlay, TagList.style.overlay);
        _this.applyStyles(_this.els.container, TagList.style.popup.container.transition, {
          opacity: 0
        });
        _this.currentOffset = $.extend({}, _this.currentOffset, {
          scale: 0
        });
        return setTimeout(function() {
          _this.removeStyles(_this.els.container, TagList.style.popup.container.transition);
          _this.els.container.appendTo(_this.parent);
          return resolve();
        }, 325);
      };
    })(this));
  };
  Popup.prototype.resetYPosition = function(newScrollY, prevScrollY) {
    var yChange;
    if (prevScrollY == null) {
      prevScrollY = 0;
    }
    yChange = newScrollY - prevScrollY;
    return this.currentOffset = $.extend({}, this.currentOffset, {
      y: this.currentOffset.y - yChange
    });
  };
  Popup.prototype.resetXPosition = function(newScrollX, prevScrollX) {
    var xChange;
    if (prevScrollX == null) {
      prevScrollX = 0;
    }
    xChange = newScrollX + prevScrollX;
    return this.currentOffset = $.extend({}, this.currentOffset, {
      x: this.currentOffset.x - xChange
    });
  };
  Popup.prototype.resetWidth = function(newWidth) {
    var DIMENSIONS, boundingElDimensions, targetWidth, windowWidth;
    boundingElDimensions = getElDimensions(this.list.options.boundingEl[0]);
    DIMENSIONS = getDefaultDimensions(boundingElDimensions);
    windowWidth = Popup.windowWidth - DIMENSIONS.leftPadding - DIMENSIONS.rightPadding;
    if (windowWidth > this.options.maxWidth + (DIMENSIONS.leftPadding + DIMENSIONS.rightPadding)) {
      targetWidth = this.options.maxWidth;
    } else {
      targetWidth = windowWidth - (DIMENSIONS.leftPadding + DIMENSIONS.rightPadding);
    }
    return this.applyStyles(this.els.container, {
      width: targetWidth + "px"
    });
  };
  SimplyBind(0).ofEvent('scroll').of(window).to(function() {
    Popup.windowScrollY = window.scrollY;
    return Popup.windowScrollX = window.scrollX;
  });
  SimplyBind(0).ofEvent('resize').of(window).to(function() {
    Popup.windowHeight = window.innerHeight;
    return Popup.windowWidth = window.innerWidth;
  });
  Popup.windowScroll = window.scrollY;
  Popup.windowHeight = window.innerHeight;
  Popup.windowWidth = window.innerWidth;
  Tag = function(list, options1, data, popupContent) {
    this.list = list;
    this.options = options1;
    this.data = data != null ? data : {};
    this.applyStyles = applyStyles.bind(this);
    this.removeStyles = removeStyles.bind(this);
    this.name = this.options.name;
    this.label = this.options.label;
    this.value = this.options["default"] || '';
    this.els = {};
    this.els.container = $(markup.tag.container()).data('Tag', this);
    this.els.text = $(markup.tag.text()).appendTo(this.els.container);
    this.els.removeButton = $(markup.tag.removeButton()).appendTo(this.els.container);
    this.popup = new Popup(this.list, this.els.container, this.options.popup);
    if (popupContent) {
      $(popupContent).appendTo(this.popup.els.content);
    } else {
      $(this.options.content(this.data)).appendTo(this.popup.els.content);
    }
    this.attachBindings();
    this.appendToDOM();
    return this;
  };
  Tag.prototype.appendToDOM = function() {
    this.applyStyles(this.els.container, TagList.style.tag.container);
    this.applyStyles(this.els.text, TagList.style.tag.text);
    this.applyStyles(this.els.removeButton, TagList.style.tag.removeButton);
    return this.els.container.insertBefore(this.list.els.addButton);
  };
  Tag.prototype.attachBindings = function() {
    SimplyBind('label').of(this).to('textContent.label').of(this.els.text).transform((function(_this) {
      return function(label) {
        if (_this.options.labelFormatter) {
          return _this.options.labelFormatter(label);
        } else {
          return label;
        }
      };
    })(this));
    SimplyBind('value').of(this).to('textContent.value').of(this.els.text).transform((function(_this) {
      return function(value) {
        if (_this.options.valueFormatter) {
          return _this.options.valueFormatter(value);
        } else {
          return value;
        }
      };
    })(this));
    SimplyBind(0).ofEvent('click').of(this.els.removeButton).to((function(_this) {
      return function(event) {
        _this.list.remove(_this);
        return event.stopPropagation();
      };
    })(this));
    SimplyBind(0).ofEvent('click').of(this.els.container).to((function(_this) {
      return function(event) {
        return _this.popup.open();
      };
    })(this));
    return SimplyBind('value', {
      updateOnBind: !!this.data.value
    }).of(this.data).to('value').of(this);
  };
  TagList = function(targetContainer, tagOptions, options) {
    var defaultTagName, defaultTagValue, i, len, ref, ref1, tagOption;
    this.targetContainer = targetContainer;
    this.tagOptions = tagOptions != null ? tagOptions : [];
    this.applyStyles = applyStyles.bind(this);
    this.removeStyles = removeStyles.bind(this);
    this.options = $.extend(true, {}, defaultOptions, options);
    this.options.boundingEl = $(this.options.boundingEl);
    this.tagOptionsAvailable = this.tagOptions.slice();
    this.tags = [];
    this.current = {};
    this.els = {};
    this.els.container = $(markup.container()).data('TagList', this);
    this.els.overlay = $(markup.overlay()).prependTo(document.body);
    this.els.addButton = $(markup.addButton(this.options.itemLabel)).appendTo(this.els.container);
    this.popup = new Popup(this, this.els.addButton, null, true);
    ref = this.tagOptions;
    for (i = 0, len = ref.length; i < len; i++) {
      tagOption = ref[i];
      if (tagOption.name == null) {
        tagOption.name = tagOption.label;
      }
    }
    ref1 = this.options["default"];
    for (defaultTagName in ref1) {
      defaultTagValue = ref1[defaultTagName];
      tagOption = this.tagOptions.find(function(tagOption) {
        return tagOption.name === defaultTagName;
      });
      this.add({
        value: defaultTagValue
      }, tagOption);
    }
    this.attachBindings();
    this.appendToDOM();
    return this;
  };
  TagList.prototype.addTagOption = function(tagOption) {
    return this.tagOptions.push(tagOption);
  };
  TagList.prototype.add = function(tagData, tagOption, popupContent) {
    var tagObj;
    this.tags.push(tagObj = new Tag(this, tagOption, tagData, popupContent));
    this.tagOptionsAvailable.splice(this.tagOptionsAvailable.indexOf(tagOption), 1);
    return SimplyBind('value', {
      updateOnBind: false
    }).of(tagObj).to((function(_this) {
      return function() {
        return _this.notifyChange();
      };
    })(this));
  };
  TagList.prototype.remove = function(tagInstance) {
    tagInstance.popup.close();
    tagInstance.els.container.remove();
    this.tags.splice(this.tags.indexOf(tagInstance), 1);
    return this.tagOptionsAvailable.push(tagInstance.options);
  };
  TagList.prototype.appendToDOM = function() {
    this.applyStyles(this.els.container, TagList.style.container);
    this.applyStyles(this.els.overlay, TagList.style.overlay);
    this.applyStyles(this.els.addButton, TagList.style.addButton);
    this.applyStyles(this.els.addButton.children(), TagList.style.addButton.text);
    return this.els.container.appendTo(this.targetContainer);
  };
  TagList.prototype.attachBindings = function() {
    SimplyBind(0).ofEvent('click').of(this.els.addButton).to((function(_this) {
      return function() {
        return _this.popup.open();
      };
    })(this));
    SimplyBind(0).ofEvent('click').of(this.popup.els.button).to((function(_this) {
      return function() {
        _this.add(_this.current.dataObj, _this.current.tagOption, _this.current.contentElement);
        return _this.popup.close().then(function() {
          return _this.selectedTag = '';
        });
      };
    })(this));
    SimplyBind('value').of(this.popup.els.selectInput).to('selectedTag').of(this).bothWays().chainTo((function(_this) {
      return function(selectedTag) {
        if (selectedTag) {
          _this.current.dataObj = {
            value: null
          };
          _this.current.tagOption = _this.getTagOptionByLabel(selectedTag);
          _this.current.contentElement = $(_this.current.tagOption.content(_this.current.dataObj));
          return _this.popup.els.content.empty().append(_this.current.contentElement);
        }
      };
    })(this));
    return SimplyBind(this.tags, {
      trackArrayChildren: false,
      updateOnBind: false
    }).to((function(_this) {
      return function() {
        return _this.notifyChange();
      };
    })(this));
  };
  TagList.prototype.closeAllPopups = function() {
    var i, len, ref, results, tag;
    this.popup.close();
    ref = this.tags;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      tag = ref[i];
      results.push(tag.popup.close());
    }
    return results;
  };
  TagList.prototype.getValues = function() {
    var tags;
    tags = this.tags;
    return new function() {
      var i, len, tag;
      for (i = 0, len = tags.length; i < len; i++) {
        tag = tags[i];
        this[tag.name] = tag.options.valueTransform ? tag.options.valueTransform(tag.value) : tag.value;
      }
      return this;
    };
  };
  TagList.prototype.notifyChange = function() {
    var base;
    return typeof (base = this.options).onChange === "function" ? base.onChange(this.getValues(), this) : void 0;
  };
  TagList.prototype.getTagOptionByLabel = function(targetLabel) {
    return this.tagOptions.find(function(tagOption) {
      return tagOption.label === targetLabel;
    });
  };
  TagList.style = styles;
  TagList.version = '1.0.0';
  if (typeof window !== "undefined" && window !== null) {
    window.TagList = TagList;
  }
  if ((typeof exports !== "undefined" && exports !== null ? exports.module : void 0) != null) {
    return module.exports = TagList;
  } else if (typeof define === 'function' && define.amd) {
    return define(['TagList'], function() {
      return TagList;
    });
  } else {
    return window.TagList = TagList;
  }
})(jQuery);
